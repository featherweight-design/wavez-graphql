// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//* Device
enum DeviceType {
  NANOLEAF
  LIFX
  HUE
}

model Device {
  id                   String              @id @default(uuid())
  ip                   String              @unique
  name                 String              @unique
  mac                  String              @unique
  type                 DeviceType
  authTokenId          String?             @unique
  authToken            NanoleafAuthToken?  @relation(fields: [authTokenId], references: [id])
  userId               String
  user                 User                @relation(fields: [userId], references: [id])
  nanoleafPropertiesId String?
  naoleafProperties    NanoleafProperties? @relation(fields: [nanoleafPropertiesId], references: [id])
  lifxPropertiesId     String?
  lifxProperties       LifxProperties?     @relation(fields: [lifxPropertiesId], references: [id])
  huePropertiesId      String?
  hueProperties        HueProperties?      @relation(fields: [huePropertiesId], references: [id])
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

//* Nanoleaf
model NanoleafUser {
  id         String              @id @default(uuid())
  authTokens NanoleafAuthToken[]
  userId     String              @unique
  user       User                @relation(fields: [userId], references: [id])
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}

model NanoleafAuthToken {
  id             String              @id @default(uuid())
  token          String              @unique
  panelId        String?
  panel          NanoleafProperties? @relation(fields: [panelId], references: [id])
  nanoleafUserId String?
  nanoleafUser   NanoleafUser?       @relation(fields: [nanoleafUserId], references: [id])
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  Device         Device[]
}

model NanoleafProperties {
  id              String               @id @default(uuid())
  name            String
  serialNo        String               @unique
  firmwareVersion String
  model           String
  state           NanoleafState?
  effects         NanoleafEffects?
  panelLayout     NanoleafPanelLayout?
  rhythm          NanoleafRhythm?
  authToken       NanoleafAuthToken?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  Device          Device[]
}

model NanoleafState {
  id           String              @id @default(uuid())
  on           NanoleafStateValue? @relation("on")
  brightness   NanoleafStateValue? @relation("brightness")
  hue          NanoleafStateValue? @relation("hue")
  sat          NanoleafStateValue? @relation("sat")
  ct           NanoleafStateValue? @relation("ct")
  colorMode    String
  propertiesId String              @unique
  properties   NanoleafProperties  @relation(fields: [propertiesId], references: [id])
}

model NanoleafStateValue {
  value           Boolean
  max             Int?
  min             Int?
  stateId         String         @unique
  stateOn         NanoleafState? @relation("on", fields: [stateId], references: [id])
  stateBrightness NanoleafState? @relation("brightness", fields: [stateId], references: [id])
  stateHue        NanoleafState? @relation("hue", fields: [stateId], references: [id])
  stateSat        NanoleafState? @relation("sat", fields: [stateId], references: [id])
  stateCt         NanoleafState? @relation("ct", fields: [stateId], references: [id])
}

model NanoleafEffects {
  select       String
  effectsList  String[]
  propertiesId String             @unique
  properties   NanoleafProperties @relation(fields: [propertiesId], references: [id])
}

model NanoleafPanelLayout {
  id           String             @id @default(uuid())
  propertiesId String             @unique
  properties   NanoleafProperties @relation(fields: [propertiesId], references: [id])
}

model NanoleafLayout {
  id                String                          @id @default(uuid())
  numPanels         Int
  sideLength        Int
  positionData      NanoleafPosition?
  globalOrientation NanoleafGlobalOrientationValue?
}

model NanoleafPosition {
  id       String          @id @default(uuid())
  panelId  Int?
  x        Int
  y        Int
  o        Int
  layoutId String?         @unique
  layout   NanoleafLayout? @relation(fields: [layoutId], references: [id])
  rhythmId String?         @unique
  rhythm   NanoleafRhythm? @relation(fields: [rhythmId], references: [id])
}

model NanoleafGlobalOrientationValue {
  value    Boolean
  max      Int?
  min      Int?
  layoutId String         @unique
  layout   NanoleafLayout @relation(fields: [layoutId], references: [id])
}

model NanoleafRhythm {
  id              String             @id @default(uuid())
  rhythmConnected Boolean
  rhytmActive     Boolean?
  rhythmId        Int?
  hardwareVersion String?
  firmwareVersion String?
  auxAvailable    Boolean?
  rhythmMode      Float?
  rhythmPos       NanoleafPosition?
  propertiesId    String             @unique
  properties      NanoleafProperties @relation(fields: [propertiesId], references: [id])
}

//* Lifx
model LifxProperties {
  id     String   @id @default(uuid())
  Device Device[]
}

//* Hue
model HueProperties {
  id     String   @id @default(uuid())
  Device Device[]
}

//* User
model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String?
  nanoleafUser NanoleafUser?
  devices      Device[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
