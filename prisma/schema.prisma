// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//* User
model User {
  id         String              @id @default(uuid())
  email      String              @unique
  name       String?
  devices    Device[]
  authTokens NanoleafAuthToken[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}

//* Device
enum DeviceType {
  NANOLEAF
  LIFX
  HUE
}

model Device {
  id                   String              @id @default(uuid())
  ip                   String              @unique
  name                 String              @unique
  mac                  String              @unique
  type                 DeviceType
  userId               String
  user                 User                @relation(fields: [userId], references: [id])
  nanoleafAuthTokenId  String?             @unique
  nanoleafAuthToken    NanoleafAuthToken?
  nanoleafPropertiesId String?             @unique
  nanoleafProperties   NanoleafProperties?
  lifxPropertiesId     String?             @unique
  lifxProperties       LifxProperties?
  huePropertiesId      String?             @unique
  hueProperties        HueProperties?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model NanoleafAuthToken {
  id        String              @id @default(uuid())
  token     String              @unique
  deviceId  String?             @unique
  device    Device?             @relation(fields: [deviceId], references: [id])
  panelId   String?             @unique
  panel     NanoleafProperties? @relation(fields: [panelId], references: [id])
  userId    String?
  user      User?               @relation(fields: [userId], references: [id])
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model NanoleafProperties {
  id              String             @id @default(uuid())
  name            String
  serialNo        String             @unique
  firmwareVersion String
  model           String
  palettes        Palette[]
  authToken       NanoleafAuthToken?
  deviceId        String
  device          Device             @relation(fields: [deviceId], references: [id])
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

//* Lifx
model LifxProperties {
  id        String   @id @default(uuid())
  deviceId  String   @unique
  device    Device?  @relation(fields: [deviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//* Hue
model HueProperties {
  id        String   @id @default(uuid())
  deviceId  String   @unique
  device    Device?  @relation(fields: [deviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//* Color Palette
model Palette {
  id                   String             @id @default(uuid())
  name                 String             @unique
  colors               Color[]
  nanoleafPropertiesId String
  nanoleafProperties   NanoleafProperties @relation(fields: [nanoleafPropertiesId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model Color {
  id         String    @id @default(uuid())
  hue        Int
  saturation Int
  brightness Int
  palettes   Palette[]
}
